// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Wareship.Authentication;

namespace Wareship.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "fab4fac1-c546-41de-aebc-a14da6895711",
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = "c7b013f0-5201-4317-abd8-c211f91b7330",
                            ConcurrencyStamp = "2",
                            Name = "Wareshouse",
                            NormalizedName = "Wareshouse"
                        },
                        new
                        {
                            Id = "b7b013f0-5201-4317-abd8-c211f91b7660",
                            ConcurrencyStamp = "3",
                            Name = "Supplier",
                            NormalizedName = "Supplier"
                        },
                        new
                        {
                            Id = "a7b013f0-5201-4317-abd8-c211f91b7990",
                            ConcurrencyStamp = "4",
                            Name = "Dropshipper",
                            NormalizedName = "Dropshipper"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db12554843e5",
                            RoleId = "fab4fac1-c546-41de-aebc-a14da6895711"
                        },
                        new
                        {
                            UserId = "supplier-6340-4840-95c2-db12554843e5",
                            RoleId = "b7b013f0-5201-4317-abd8-c211f91b7660"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Wareship.Authentication.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subdistrict")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UserStatusId")
                        .HasColumnType("int");

                    b.Property<int>("UserTierId")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserStatusId");

                    b.HasIndex("UserTierId");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db12554843e5",
                            AccessFailedCount = 0,
                            City = "Kabupaten Ciamis",
                            ConcurrencyStamp = "84b3f356-5d46-461e-9fd9-633f1fbe3709",
                            CreatedAt = new DateTime(2021, 9, 22, 20, 50, 53, 233, DateTimeKind.Local).AddTicks(5547),
                            Dob = new DateTime(1989, 12, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@example.com",
                            EmailConfirmed = false,
                            Gender = "Laki-Laki",
                            LockoutEnabled = false,
                            Name = "Admin Suradmin",
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEESZcg8OlknXEKfZOoWX0xowJh2bCO8gYrxJvUq5dWYgn2GTWKub+kke+SZkCQ8coQ==",
                            PhoneNumber = "085223670378",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://images.pexels.com/photos/6652928/pexels-photo-6652928.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940",
                            Province = "Jawa Barat",
                            SecurityStamp = "fefed367-7a94-4475-a22e-847c3dcb7561",
                            Street = "Dusun Desa, Desa Cijeungjing",
                            Subdistrict = "Cijeungjing",
                            TwoFactorEnabled = false,
                            UserName = "admin",
                            UserStatusId = 1,
                            UserTierId = 1
                        },
                        new
                        {
                            Id = "supplier-6340-4840-95c2-db12554843e5",
                            AccessFailedCount = 0,
                            City = "Kabupaten Ciamis",
                            ConcurrencyStamp = "c093e816-a80f-49be-91ef-0929aff9d597",
                            CreatedAt = new DateTime(2021, 9, 22, 20, 50, 53, 275, DateTimeKind.Local).AddTicks(1521),
                            Dob = new DateTime(1989, 12, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "supplier@example.com",
                            EmailConfirmed = false,
                            Gender = "Laki-Laki",
                            LockoutEnabled = false,
                            Name = "Susu Plier",
                            NormalizedEmail = "SUPPLIER@EXAMPLE.COM",
                            NormalizedUserName = "SUPPLIER",
                            PasswordHash = "AQAAAAEAACcQAAAAEMSowM6iZbmzPj5ioV6tkNfdVyDqeWFIJFMeNF69LqC6oJVLVwCRHwXRWHG07nygmQ==",
                            PhoneNumber = "085223670378",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://images.pexels.com/photos/6652928/pexels-photo-6652928.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940",
                            Province = "Jawa Barat",
                            SecurityStamp = "7359160e-aefc-4121-b6fa-c9736a42d6ec",
                            Street = "Dusun Desa, Desa Cijeungjing",
                            Subdistrict = "Cijeungjing",
                            TwoFactorEnabled = false,
                            UserName = "supplier",
                            UserStatusId = 1,
                            UserTierId = 2
                        });
                });

            modelBuilder.Entity("Wareship.Model.Products.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IsTrash")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbnailUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsTrash = 0,
                            Name = "Buku"
                        },
                        new
                        {
                            Id = 2,
                            IsTrash = 0,
                            Name = "Dapur"
                        },
                        new
                        {
                            Id = 3,
                            IsTrash = 0,
                            Name = "Elektronik"
                        },
                        new
                        {
                            Id = 4,
                            IsTrash = 0,
                            Name = "Fashion Anak & Bayi"
                        },
                        new
                        {
                            Id = 5,
                            IsTrash = 0,
                            Name = "Fashion Muslim"
                        },
                        new
                        {
                            Id = 6,
                            IsTrash = 0,
                            Name = "Fashion Pria"
                        },
                        new
                        {
                            Id = 7,
                            IsTrash = 0,
                            Name = "Fashion Wanita"
                        },
                        new
                        {
                            Id = 8,
                            IsTrash = 0,
                            Name = "Film & Musik"
                        },
                        new
                        {
                            Id = 9,
                            IsTrash = 0,
                            Name = "Gaming"
                        },
                        new
                        {
                            Id = 10,
                            IsTrash = 0,
                            Name = "Handphone & Tablet"
                        });
                });

            modelBuilder.Entity("Wareship.Model.Products.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("ChargeableWeight")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Sku")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Volume")
                        .HasColumnType("float");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProductStatusId");

                    b.HasIndex("SubCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChargeableWeight = 1.0,
                            Description = "Kamus Bahasa Inggris ini paling lengkap dan paling murah diantara yang lainnya",
                            Name = "Kamus Bahasa Inggris 1 Juta Kata",
                            Price = 100000.0,
                            ProductStatusId = 1,
                            Sku = "A001",
                            SubCategoryId = 1,
                            UserId = "supplier-6340-4840-95c2-db12554843e5",
                            Volume = 1.0,
                            Weight = 1.0
                        },
                        new
                        {
                            Id = 2,
                            ChargeableWeight = 1.0,
                            Description = "Kamus Bahasa Inggris ini paling lengkap dan paling murah diantara yang lainnya",
                            Name = "Kamus Bahasa Inggris 1 Juta Kata",
                            Price = 100000.0,
                            ProductStatusId = 1,
                            Sku = "A002",
                            SubCategoryId = 1,
                            UserId = "supplier-6340-4840-95c2-db12554843e5",
                            Volume = 1.0,
                            Weight = 1.0
                        },
                        new
                        {
                            Id = 3,
                            ChargeableWeight = 1.0,
                            Description = "Kamus Bahasa Inggris ini paling lengkap dan paling murah diantara yang lainnya",
                            Name = "Kamus Bahasa Inggris 1 Juta Kata",
                            Price = 100000.0,
                            ProductStatusId = 1,
                            Sku = "A003",
                            SubCategoryId = 1,
                            UserId = "supplier-6340-4840-95c2-db12554843e5",
                            Volume = 1.0,
                            Weight = 1.0
                        },
                        new
                        {
                            Id = 4,
                            ChargeableWeight = 1.0,
                            Description = "Kamus Bahasa Inggris ini paling lengkap dan paling murah diantara yang lainnya",
                            Name = "Kamus Bahasa Inggris 1 Juta Kata",
                            Price = 100000.0,
                            ProductStatusId = 1,
                            Sku = "A004",
                            SubCategoryId = 1,
                            UserId = "supplier-6340-4840-95c2-db12554843e5",
                            Volume = 1.0,
                            Weight = 1.0
                        },
                        new
                        {
                            Id = 5,
                            ChargeableWeight = 1.0,
                            Description = "Kamus Bahasa Inggris ini paling lengkap dan paling murah diantara yang lainnya",
                            Name = "Kamus Bahasa Inggris 1 Juta Kata",
                            Price = 100000.0,
                            ProductStatusId = 1,
                            Sku = "A005",
                            SubCategoryId = 1,
                            UserId = "supplier-6340-4840-95c2-db12554843e5",
                            Volume = 1.0,
                            Weight = 1.0
                        },
                        new
                        {
                            Id = 6,
                            ChargeableWeight = 1.0,
                            Description = "Kamus Bahasa Inggris ini paling lengkap dan paling murah diantara yang lainnya",
                            Name = "Kamus Bahasa Inggris 1 Juta Kata",
                            Price = 100000.0,
                            ProductStatusId = 1,
                            Sku = "A006",
                            SubCategoryId = 1,
                            UserId = "supplier-6340-4840-95c2-db12554843e5",
                            Volume = 1.0,
                            Weight = 1.0
                        },
                        new
                        {
                            Id = 7,
                            ChargeableWeight = 1.0,
                            Description = "Kamus Bahasa Inggris ini paling lengkap dan paling murah diantara yang lainnya",
                            Name = "Kamus Bahasa Inggris 1 Juta Kata",
                            Price = 100000.0,
                            ProductStatusId = 1,
                            Sku = "A007",
                            SubCategoryId = 1,
                            UserId = "supplier-6340-4840-95c2-db12554843e5",
                            Volume = 1.0,
                            Weight = 1.0
                        },
                        new
                        {
                            Id = 8,
                            ChargeableWeight = 1.0,
                            Description = "Kamus Bahasa Inggris ini paling lengkap dan paling murah diantara yang lainnya",
                            Name = "Kamus Bahasa Inggris 1 Juta Kata",
                            Price = 100000.0,
                            ProductStatusId = 1,
                            Sku = "A008",
                            SubCategoryId = 1,
                            UserId = "supplier-6340-4840-95c2-db12554843e5",
                            Volume = 1.0,
                            Weight = 1.0
                        },
                        new
                        {
                            Id = 9,
                            ChargeableWeight = 1.0,
                            Description = "Kamus Bahasa Inggris ini paling lengkap dan paling murah diantara yang lainnya",
                            Name = "Kamus Bahasa Inggris 1 Juta Kata",
                            Price = 100000.0,
                            ProductStatusId = 1,
                            Sku = "A009",
                            SubCategoryId = 1,
                            UserId = "supplier-6340-4840-95c2-db12554843e5",
                            Volume = 1.0,
                            Weight = 1.0
                        },
                        new
                        {
                            Id = 10,
                            ChargeableWeight = 1.0,
                            Description = "Kamus Bahasa Inggris ini paling lengkap dan paling murah diantara yang lainnya",
                            Name = "Kamus Bahasa Inggris 1 Juta Kata",
                            Price = 100000.0,
                            ProductStatusId = 1,
                            Sku = "A0010",
                            SubCategoryId = 1,
                            UserId = "supplier-6340-4840-95c2-db12554843e5",
                            Volume = 1.0,
                            Weight = 1.0
                        });
                });

            modelBuilder.Entity("Wareship.Model.Products.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Filename")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImage");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2021, 9, 22, 20, 50, 53, 284, DateTimeKind.Local).AddTicks(6083),
                            Filename = "https://images.pexels.com/photos/762687/pexels-photo-762687.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940",
                            ProductId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2021, 9, 22, 20, 50, 53, 284, DateTimeKind.Local).AddTicks(7285),
                            Filename = "https://images.pexels.com/photos/762687/pexels-photo-762687.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940",
                            ProductId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2021, 9, 22, 20, 50, 53, 284, DateTimeKind.Local).AddTicks(7292),
                            Filename = "https://images.pexels.com/photos/762687/pexels-photo-762687.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940",
                            ProductId = 3
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2021, 9, 22, 20, 50, 53, 284, DateTimeKind.Local).AddTicks(7294),
                            Filename = "https://images.pexels.com/photos/762687/pexels-photo-762687.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940",
                            ProductId = 4
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2021, 9, 22, 20, 50, 53, 284, DateTimeKind.Local).AddTicks(7295),
                            Filename = "https://images.pexels.com/photos/762687/pexels-photo-762687.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940",
                            ProductId = 5
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2021, 9, 22, 20, 50, 53, 284, DateTimeKind.Local).AddTicks(7298),
                            Filename = "https://images.pexels.com/photos/762687/pexels-photo-762687.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940",
                            ProductId = 6
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2021, 9, 22, 20, 50, 53, 284, DateTimeKind.Local).AddTicks(7299),
                            Filename = "https://images.pexels.com/photos/762687/pexels-photo-762687.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940",
                            ProductId = 7
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2021, 9, 22, 20, 50, 53, 284, DateTimeKind.Local).AddTicks(7301),
                            Filename = "https://images.pexels.com/photos/762687/pexels-photo-762687.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940",
                            ProductId = 8
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2021, 9, 22, 20, 50, 53, 284, DateTimeKind.Local).AddTicks(7302),
                            Filename = "https://images.pexels.com/photos/762687/pexels-photo-762687.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940",
                            ProductId = 9
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2021, 9, 22, 20, 50, 53, 284, DateTimeKind.Local).AddTicks(7303),
                            Filename = "https://images.pexels.com/photos/762687/pexels-photo-762687.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940",
                            ProductId = 10
                        });
                });

            modelBuilder.Entity("Wareship.Model.Products.ProductStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Active"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Banned"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Deleted"
                        });
                });

            modelBuilder.Entity("Wareship.Model.Products.SubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("IsTrash")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbnailUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            IsTrash = 0,
                            Name = "Kamus"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            IsTrash = 0,
                            Name = "Religi & Spiritual"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            IsTrash = 0,
                            Name = "Peralatan Makan & Minum"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            IsTrash = 0,
                            Name = "Peralatan Masak"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            IsTrash = 0,
                            Name = "Alat Pendingin Ruangan"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            IsTrash = 0,
                            Name = "TV & Aksesoris"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 4,
                            IsTrash = 0,
                            Name = "Pakaian Anak Laki-Laki"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 4,
                            IsTrash = 0,
                            Name = "Pakaian Anak Perempuan"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 5,
                            IsTrash = 0,
                            Name = "Jilbab"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 5,
                            IsTrash = 0,
                            Name = "Perlengkapan Ibadah"
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 6,
                            IsTrash = 0,
                            Name = "Batik Pria"
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 6,
                            IsTrash = 0,
                            Name = "Celana Pria"
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 7,
                            IsTrash = 0,
                            Name = "Batik Wanita"
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 7,
                            IsTrash = 0,
                            Name = "Bawahan Wanita"
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 8,
                            IsTrash = 0,
                            Name = "Film & Serial"
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 8,
                            IsTrash = 0,
                            Name = "Gitar & Bass"
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 9,
                            IsTrash = 0,
                            Name = "CD Game"
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 9,
                            IsTrash = 0,
                            Name = "Game Console"
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 10,
                            IsTrash = 0,
                            Name = "Handphone"
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 10,
                            IsTrash = 0,
                            Name = "Tablet"
                        });
                });

            modelBuilder.Entity("Wareship.Model.Stocks.Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VariationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VariationId");

                    b.ToTable("Option");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "38",
                            VariationId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "39",
                            VariationId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "40",
                            VariationId = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "41",
                            VariationId = 1
                        },
                        new
                        {
                            Id = 5,
                            Name = "42",
                            VariationId = 1
                        },
                        new
                        {
                            Id = 6,
                            Name = "43",
                            VariationId = 1
                        },
                        new
                        {
                            Id = 7,
                            Name = "Hitam",
                            VariationId = 2
                        },
                        new
                        {
                            Id = 8,
                            Name = "Putih",
                            VariationId = 2
                        },
                        new
                        {
                            Id = 9,
                            Name = "Merah",
                            VariationId = 2
                        },
                        new
                        {
                            Id = 10,
                            Name = "Biru",
                            VariationId = 2
                        },
                        new
                        {
                            Id = 11,
                            Name = "Pink",
                            VariationId = 2
                        },
                        new
                        {
                            Id = 12,
                            Name = "Kuning",
                            VariationId = 2
                        });
                });

            modelBuilder.Entity("Wareship.Model.Stocks.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("IsTrash")
                        .HasColumnType("int");

                    b.Property<int>("OptionId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Sku")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OptionId");

                    b.HasIndex("ProductId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Stock");
                });

            modelBuilder.Entity("Wareship.Model.Stocks.Variation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Variation");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Ukuran"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Warna"
                        });
                });

            modelBuilder.Entity("Wareship.Model.Stocks.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subdistrict")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Warehouse");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Kota Tasikmalaya",
                            Name = "Warehouse JNE Tasikmalaya",
                            Phone = "",
                            Province = "Jawa Barat",
                            Street = "Jl. Ir. H. Juanda No.21, RW.1, Cipedes",
                            Subdistrict = "Cipedes",
                            ZipCode = "46151"
                        });
                });

            modelBuilder.Entity("Wareship.Model.Transactions.Consignee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subdistrict")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Consignee");
                });

            modelBuilder.Entity("Wareship.Model.Transactions.Courier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Courier");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "JNE"
                        });
                });

            modelBuilder.Entity("Wareship.Model.Transactions.DeliveryService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourierId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourierId");

                    b.ToTable("DeliveryService");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourierId = 1,
                            Name = "REG"
                        },
                        new
                        {
                            Id = 2,
                            CourierId = 1,
                            Name = "YES"
                        },
                        new
                        {
                            Id = 3,
                            CourierId = 1,
                            Name = "OKE"
                        },
                        new
                        {
                            Id = 4,
                            CourierId = 1,
                            Name = "JTR"
                        });
                });

            modelBuilder.Entity("Wareship.Model.Transactions.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("StockId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StockId");

                    b.HasIndex("TransactionId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Wareship.Model.Transactions.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Payment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Bank Transfer"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Cash on Delivery"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Paylater"
                        });
                });

            modelBuilder.Entity("Wareship.Model.Transactions.Shipper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subdistrict")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Shipper");
                });

            modelBuilder.Entity("Wareship.Model.Transactions.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Airwaybill")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConsigneeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeliveryServiceId")
                        .HasColumnType("int");

                    b.Property<int>("IsTrash")
                        .HasColumnType("int");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<int>("ShipperId")
                        .HasColumnType("int");

                    b.Property<double>("TotalDiscount")
                        .HasColumnType("float");

                    b.Property<double>("TotalFee")
                        .HasColumnType("float");

                    b.Property<int>("TotalItem")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<double>("TotalShipping")
                        .HasColumnType("float");

                    b.Property<double>("TotalTax")
                        .HasColumnType("float");

                    b.Property<double>("TotalVolume")
                        .HasColumnType("float");

                    b.Property<double>("TotalWeight")
                        .HasColumnType("float");

                    b.Property<int>("TransactionStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ConsigneeId");

                    b.HasIndex("DeliveryServiceId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("ShipperId");

                    b.HasIndex("TransactionStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("Wareship.Model.Transactions.TransactionStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TransactionStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Accepted"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Processed"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Delivered"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Cancelled"
                        });
                });

            modelBuilder.Entity("Wareship.Model.Users.UserStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Active"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Suspended"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Banned"
                        });
                });

            modelBuilder.Entity("Wareship.Model.Users.UserTier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserTier");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Rookie"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Champion"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Ultimate"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Mega"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Wareship.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Wareship.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wareship.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Wareship.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Wareship.Authentication.ApplicationUser", b =>
                {
                    b.HasOne("Wareship.Model.Users.UserStatus", "UserStatus")
                        .WithMany("Users")
                        .HasForeignKey("UserStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wareship.Model.Users.UserTier", "UserTier")
                        .WithMany("Users")
                        .HasForeignKey("UserTierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserStatus");

                    b.Navigation("UserTier");
                });

            modelBuilder.Entity("Wareship.Model.Products.Product", b =>
                {
                    b.HasOne("Wareship.Model.Products.ProductStatus", "ProductStatus")
                        .WithMany("Products")
                        .HasForeignKey("ProductStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wareship.Model.Products.SubCategory", "SubCategory")
                        .WithMany("Products")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wareship.Authentication.ApplicationUser", "User")
                        .WithMany("Products")
                        .HasForeignKey("UserId");

                    b.Navigation("ProductStatus");

                    b.Navigation("SubCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wareship.Model.Products.ProductImage", b =>
                {
                    b.HasOne("Wareship.Model.Products.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Wareship.Model.Products.SubCategory", b =>
                {
                    b.HasOne("Wareship.Model.Products.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Wareship.Model.Stocks.Option", b =>
                {
                    b.HasOne("Wareship.Model.Stocks.Variation", "Variation")
                        .WithMany("Options")
                        .HasForeignKey("VariationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Variation");
                });

            modelBuilder.Entity("Wareship.Model.Stocks.Stock", b =>
                {
                    b.HasOne("Wareship.Model.Stocks.Option", "Option")
                        .WithMany("Stocks")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wareship.Model.Products.Product", "Product")
                        .WithMany("Stocks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wareship.Model.Stocks.Warehouse", "Warehouse")
                        .WithMany("Stocks")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Option");

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Wareship.Model.Transactions.DeliveryService", b =>
                {
                    b.HasOne("Wareship.Model.Transactions.Courier", "Courier")
                        .WithMany("DeliveryServices")
                        .HasForeignKey("CourierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Courier");
                });

            modelBuilder.Entity("Wareship.Model.Transactions.Order", b =>
                {
                    b.HasOne("Wareship.Model.Stocks.Stock", "Stock")
                        .WithMany("Orders")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wareship.Model.Transactions.Transaction", "Transaction")
                        .WithMany("Orders")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stock");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Wareship.Model.Transactions.Transaction", b =>
                {
                    b.HasOne("Wareship.Model.Transactions.Consignee", "Consignee")
                        .WithMany("Transactions")
                        .HasForeignKey("ConsigneeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wareship.Model.Transactions.DeliveryService", "DeliveryService")
                        .WithMany("Transactions")
                        .HasForeignKey("DeliveryServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wareship.Model.Transactions.Payment", "Payment")
                        .WithMany("Transactions")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wareship.Model.Transactions.Shipper", "Shipper")
                        .WithMany("Transactions")
                        .HasForeignKey("ShipperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wareship.Model.Transactions.TransactionStatus", "TransactionStatus")
                        .WithMany("Transactions")
                        .HasForeignKey("TransactionStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wareship.Authentication.ApplicationUser", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId");

                    b.Navigation("Consignee");

                    b.Navigation("DeliveryService");

                    b.Navigation("Payment");

                    b.Navigation("Shipper");

                    b.Navigation("TransactionStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wareship.Authentication.ApplicationUser", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Wareship.Model.Products.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Wareship.Model.Products.Product", b =>
                {
                    b.Navigation("ProductImages");

                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("Wareship.Model.Products.ProductStatus", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Wareship.Model.Products.SubCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Wareship.Model.Stocks.Option", b =>
                {
                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("Wareship.Model.Stocks.Stock", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Wareship.Model.Stocks.Variation", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("Wareship.Model.Stocks.Warehouse", b =>
                {
                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("Wareship.Model.Transactions.Consignee", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Wareship.Model.Transactions.Courier", b =>
                {
                    b.Navigation("DeliveryServices");
                });

            modelBuilder.Entity("Wareship.Model.Transactions.DeliveryService", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Wareship.Model.Transactions.Payment", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Wareship.Model.Transactions.Shipper", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Wareship.Model.Transactions.Transaction", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Wareship.Model.Transactions.TransactionStatus", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Wareship.Model.Users.UserStatus", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Wareship.Model.Users.UserTier", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
